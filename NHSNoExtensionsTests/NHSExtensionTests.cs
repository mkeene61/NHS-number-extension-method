using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using XSWHC.NHSNoExtensions;


namespace NHSNoExtensionsTests 
{
    /// <summary>
    /// Summary description for NHSExtensionTests
    /// </summary>
    [TestClass]
    public  class NHSExtensionTests 
    {
        public NHSExtensionTests()
        {
            //
            // TODO: Add constructor logic here
            //
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion

        #region FormatNumber
        [TestMethod]
        public void ReturnsFormattedNHSNo()
        {           
            String TESTNHSNo = "1234567891";
            string FormattedNHSNo = TESTNHSNo.FormatNHSNo();

            Assert.AreEqual(FormattedNHSNo, "123 456 7891");

        }


        [ExpectedException(typeof(ArgumentException))]
        [TestMethod]
        public void ThrowErrorIfNotAllNumbers()
        {
            String TESTNHSNo = "123g556891";
            string FormattedNHSNo = TESTNHSNo.FormatNHSNo();


        }


        [TestMethod]
        public void ReutrnsSameStringIfNoCharsIsNotTen()
        {

            String TESTNHSNo = "123456789";
            string FormattedNHSNo = TESTNHSNo.FormatNHSNo();

            Assert.AreEqual(FormattedNHSNo, TESTNHSNo);
        }


        [ExpectedException(typeof(ArgumentNullException))]
        [TestMethod]
        public void FailFormatAsNHSIfNHSNoIsNull()
        {
            String TESTNHSNo = null;
            string FormattedNHSNo = TESTNHSNo.FormatNHSNo();


            Assert.AreEqual(FormattedNHSNo, TESTNHSNo);

        } 
        #endregion
        #region StripFormatting

        [TestMethod]
        public void StripNHSFormatting()
        {
            String testFormattedNo = "123 456 7891";
            String ExpectedResult = "1234567891";
            String StrippedFormatting = testFormattedNo.StripNHSNoFormatting();

            Assert.AreEqual(ExpectedResult, StrippedFormatting);


        }


        [ExpectedException(typeof(ArgumentNullException))]
        [TestMethod]
        public void StripNHSFormattingFailsOnNullString()
        {
            String testFormattedNo = null;

            String StrippedFormatting = testFormattedNo.StripNHSNoFormatting();

            Assert.AreEqual(testFormattedNo, StrippedFormatting);


        } 
        #endregion


        #region ValidateNumberTests

      

        [TestMethod]
        public void IsNotValidIfNotTenChars()
        {
            string TestNo = "1234567";

            Assert.AreNotEqual(true, TestNo.ValidateNHSNo());
        }

        [ExpectedException(typeof(ArgumentNullException))]
        [TestMethod]
        public void ThrowNullExceptionIfNullIsPassed()
        {
            String Testno = null;
            //should throw error
            Testno.ValidateNHSNo();
        }

        [TestMethod]
        public void ShouldNotBeValidIfAllNosAreSame()
        {
            string Testno = "9999999999";
            Assert.AreEqual(false, Testno.ValidateNHSNo());
        }

        [ExpectedException(typeof(ArgumentException))]
        [TestMethod]
        public void CheckIfCharsAreNumbers()
        {
            String TestNo = "123s567898";
            TestNo.ValidateNHSNo();    

        }

        [TestMethod]
        public void CheckNHSNoIsValid()
        {
            String Testno = "4010232137";                   

            Assert.AreEqual(true, Testno.ValidateNHSNo());
        }


        [TestMethod]
        public void CheckSampleRangeOfNHSNos()
        {
            int SuccessCount = 0;

            String[] nhsnos = new string[] {
                
            "6468582423",
"4121911555",
"6421560741",
"4527961098",
"4783537844",
"4148988036",
"4387982993",
"4728827259",
"6060822444",
"6357962236",
"4745143826",
"4100846401",
"6091216341",
"4025682923",
"6508432761",
"4628441855",
"4460608715",
"4643751169",
"6090212288",
"4901281348",
"4842586745",
"4406385088",
"6090187682",
"4887883390",
"6090068586",
"4740556138",
"4944647794",
"4843981532",
"4765566897",
"6081036855",
"4541811472",
"4907807503",
"4908075425",
"4885822408",
"4183391830",
"6090161551",
"4487488990",
"4525823151",
"4201940802",
"6090235091",
"6089264512",
"4467262504",
"4900669458",
"6090235245",
"4465481578",
"6090187151",
"4842313668",
"4904755510",
"6090095710",
"6090158887",
"6087861076",
"6090180858",
"6090014400",
"6090236748",
"6267371646",
"6089968358",
"6090365084",
"6089442968",
"6090208396",
"4907943989",
"4887577265",
"4880038326",
"6066024906",
"4900800570",
"4420440120",
"4905924456",
"6090063592",
"4887628749",
"4066381871",
"4943072232",
"4901550659",
"4907905998",
"4804159169",
"4903253023",
"4102327983",
"6086413215",
"4720818552",
"4843992429",
"6090357421",
"4666520333",
"4464981089",
"6205355507",
"4344432231",
"4902374935",
"6090096806",
"6090193194",
"4901317504",
"6088630531",
"4466020647",
"4907868251",
"4901245392",
"4981300697",
"6089894559",
"4348124523",
"4450184475",
"4186718652",
"4227240980",
"4901837761",
"4908645418",
"4742221389",
"4885309808",
"6089928593",
"4305428504",
"4843777838",
"6321343846",
"6127759722",
"4203566231",
"4907821077",
"4731168163",
"4465732708",
"6089840653",
"6090156957",
"6303223605",
"6202338059",
"4144232883",
"4901902555",
"4907556713",
"4907926634",
"6088519304",
"4902422417",
"4549124091",
"6089458325",
"4288220750",
"4404832664",
"4440632343",
"6090384518",
"4731300312",
"4725643327",
"4901711245",
"4644733709",
"4549038136",
"4887457545",
"4902444666",
"4349742050",
"4902287250",
"4666008802",
"6104391737",
"4302095016",
"6090207306",
"4708359578",
"4749749702",
"6090233048",
"6070678877",
"4548964649",
"6085522797",
"4548966625",
"4648668731",
"4640051468",
"4966714362",
"4006597673",
"4726389505",
"4147595480",
"4908034206",
"6090050628",
"6090195499",
"4889088520",
"4940806308",
"6089988537",
"4900501735",
"4706568188",
"4883687066",
"4907435894",
"6090103454",
"6090235946",
"6269688604",
"4744582850",
"4749946982",
"6330728461",
"4901713876",
"4268591877",
"6162174212",
"6090127167",
"6090199575",
"4902156814",
"4603300999",
"6089495751",
"6090064858",
"6086400350",
"4907900252",
"4328834053",
"4901269208",
"4842323485",
"4406823603",
"4901262939",
"4420324074",
"4823906055",
"4731291097",
"6084331661",
"6090130400",
"6089508683",
"6084716458",
"6090219029",
"6269446481",
"6090377244",
"6090210951",
"4547580235",
"4465372264",
"4907843569",
"4901267647",
"4465647026",
"4940202364",
"4902495759",
"4748640685",
"6090227285",
"4144990125",
"4184107966",
"6090362352",
"6090224367",
"6090184969",
"4909570101",
"6231488950",
"4901629484",
"4889101209",
"6090202304",
"4484072009",
"4066631266",
"4824062462",
"4660454991",
"6145631201",
"4903331911",
"4560284792",
"6089515574",
"4746994145",
"4900571873",
"4846144852",
"4967502210",
"4566232727",
"4900709204",
"6089998737",
"4902403153",
"6164100348",
"6090369489",
"4880940593",
"6209343929",
"4904769007",
"4887309996",
"6085498322",
"6090666815",
"6090210498",
"4067144776",
"4726390473",
"4846399982",
"4742551958",
"4824434483",
"6066843605",
"4145947517",
"4731249139",
"4645974874",
"4940227987",
"6085443986",
"4730734106",
"6085696450",
"6089931330",
"6089502073",
"6091088173",
"4907798520",
"4885118077",
"4345894115",
"6243885852",
"4740597217",
"4901303678",
"4541086085",
"6089472077",
"4108679822",
"6202421207",
"4884999088",
"6067434083",
"4763653695",
"4906770827",
"4888540829",
"4740216876",
"6087672397",
"6086126739",
"6321940704",
"4904239415",
"4548996206",
"4882483343",
"4621488031",
"4465957408",
"4768882552",
"4783257868",
"4903103951",
"4908684375",
"4731191440",
"4187814876",
"4722361061",
"6089441813",
"4502471194",
"4902378701",
"4006215932",
"6085460384",
"4067104308",
"4162062323",
"6089464392",
"4163691782",
"4843968935",
"4843813354",
"4828273158",
"4843810754",
"6083585821",
"4862094287",
"4761943149",
"4404602162",
"4900562270",
"4907517831",
"6141782175",
"4049460211",
"4604100241",
"4901987496",
"6305275831",
"4465645805",
"4902359480",
"6085152183",
"4882758377",
"6106366020",
"4268493468",
"4884877942",
"4465950268",
"4244486275",
"4680999829",
"6308232580",
"6091154710",
"4900185345",
"6090038717",
"4084217034",
"4926632195",
"4465956665",
"6044438260",
"4720273718",
"4901174126",
"6089457736",
"4901900749",
"6088489510",
"4901330896",
"6105835213",
"4786182117",
"6087613366",
"6088525371",
"6244249445",
"6085252110",
"6330563187",
"4749054437",
"4901296957",
"4962849328",
"4646795248",
"4901719904",
"6068678342",
"6090362875",
"4343438597",
"4605164618",
"4844674900",
"4883130401",
"4843120561",
"6085657269",
"4902304066",
"4988127001",
"4867054925",
"6090011444",
"4002383199",
"4750018082",
"4901342304",
"4345414288",
"6088648635",
"4687405266",
"4547912661",
"4680010622",
"4364356328",
"4907982127",
"4804575391",
"4549452137",
"6090127795",
"4908008345",
"4265454445",
"4907924275",
"6090194573",
"6250884475",
"4649065275",
"6085080824",
"4902417391",
"6068454665",
"4828383743",
"4549352973",
"6203016969",
"4686058201",
"4842381671",
"6086149550",
"6090067458",
"6202437510",
"4465460090",
"6084927130",
"4140927801",
"4663400167",
"4342667983",
"4882485249",
"6090127272",
"4104345881",
"6090245194",
"6090377112",
"4360536437",
"4908020264",
"6286530541",
"6105079621",
"4748982195",
"4465998619",
"6104639496",
"4745569939",
"4906255205",
"4905967732",
"4902216973",
"4022280506",
"4745177135",
"4785568453",
"6089534056",
"6087175350",
"6089505536",
"6090378763",
"4687939139",
"4846237613",
"6227113387",
"4907986610",
"4482617725",
"4542804909",
"6086202540",
"4549179392",
"4720444083",
"4548013393",
"6090191000",
"4983912843",
"6124662477",
"4843777560",
"6260114230",
"6090228729",
"4684964418",
"4781225896",
"6090022829",
"4328484923",
"4843867705",
"6065608262",
"6091054910",
"4843672831",
"4907553447",
"4902390213",
"4548610456",
"4808867311",
"4783366136",
"4845442639",
"4900884510",
"6090204757",
"4541494027",
"4547789428",
"4484118890",
"4901962795",
"6106295441",
"4241139841",
"6162459357",
"4826366671",
"6083477913",
"6089439436",
"4548618074",
"6090236829",
"4903958914",
"4889062432",
"4441994257",
"6090173703",
"4844961314",
"6090000329",
"4689682313",
"6090180319",
"6085629419",
"6088663030",
"4706795249",
"6120522344",
"4250334783",
"4560459762",
"4382504783",
"4261972689",
"4982293457",
"4908024391",
"6220829336",
"4802459823",
"4208469579",
"4061937561",
"6086167869",
"6307201320",
"4731354943",
"4600690966",
"6185106868",
"4146179920",
"4843495859",
"4547355150",
"6085126026",
"4548685367",
"4731268451",
"4183148405",
"6123671413",
"4682783734",
"4887704755",
"4901735004",
"4841200509",
"4827730342",
"4605529659",
"4642665196",
"4761393394",
"4842651016",
"4883419134",
"6089500712",
"4583046138",
"4845917890",
"4731895561",
"6321008656",
"4901287583",
"6089831425",
"4749162523",
"4928123069",
"4669274872",
"4923362561",
"4760391657",
"4742827422",
"4901985736",
"4844893424",
"4408163503",
"4901741969",
"6125708640",
"4628621969",
"6245187931",
"6245638321",
"4123186440",
"4907956592",
"6090636177",
"4883121305",
"4847918843",
"4945609039",
"6090247103",
"4049345668",
"4046814462",
"4902418665",
"4706426464",
"4465774486",
"6091047434",
"6089821004",
"4843669202",
"6071007755",
"4762968579",
"6261853290",
"4442063680",
"6127833434",
"4904590015",
"4386936890",
"4901032445",
"6090199338",
"4784494472",
"6090041343",
"4520866731",
"4548933905",
"6090297208",
"4902389533",
"6262593756",
"6090176664",
"6168226923",
"6308216194",
"4908008019",
"4908691703",
"4161171994",
"4084463701",
"6089512087",
"4540098616",
"4560579601",
"4229495838",
"4740469006",
"6091242539",
"4960377402",
"4882483440",
"4149341524",
"4183108071",
"4045697519",
"4548978100",
"4907841264",
"4907855540",
"4948779008",
"4900718696",
"4860771419",
"4701570680",
"6089831972",
"4450456718",
"4905836948",
"6084905803",
"4842275944",
"4481466790",
"6202429178",
"4064836294",
"6128802176",
"4206647771",
"4864007373",
"4121627393",
"6090173525",
"6081403009",
"4548550534",
"4905157684",
"4449651200",
"6089520497",
"6090150177",
"4904451325",
"6090265802",
"4668926531",
"4743550122",
"4549358726",
"4846235599",
"6089882216",
"4681257737",
"4731298075",
"6040848677",
"6089519898",
"4646449188",
"4700186534",
"6266883201",
"4224309327",
"6088682035",
"6088379189",
"4768133762",
"6086133239",
"4885171903",
"4905715474",
"6087751874",
"6165387128",
"4887382286",
"4466254125",
"4067732791",
"4709404631",
"4842376090",
"6246184820",
"4901827383",
"6311430886",
"4902379422",
"4884177266",
"4465928874",
"4908011028",
"4228137261",
"6090166405",
"4901715054",
"6090105368",
"4889092048",
"4868218867",
"4900988871",
"4548009019",
"4803082154",
"4885103592",
"4902369613",
"4826392656",
"4485999246",
"4907840152",
"4985165220",
"6090639109",
"4620655155",
"6085145349",
"4802856385",
"4901299948",
"4845044544",
"4844773615",
"4828903526",
"6088368845",
"4400788164",
"6091293559",
"4946390952",
"4048806769",
"6089994146",
"4040281993",
"4843954098",
"6090017353",
"4888572992",
"4842317205",
"4761334207",
"4907897448",
"4907914539",
"4886362281",
"4482114715",
"4762288241",
"4466226105",
"4907955626",
"4501773561",
"4983290214",
"4548243054",
"4582896413",
"4842753862",
"4465475446",
"6123713507",
"6202980303",
"6090180572",
"4902339862",
"4466297681",
"6086041741",
"4106207575",
"4142930451",
"4707943837",
"4731276721",
"4901723529",
"4902374358",
"4549345349",
"4547328277",
"6089849073",
"6085141203",
"4120842835",
"6162448576",
"4723915044",
"6069022319",
"4065883008",
"6160282379",
"4941116380",
"6150187403",
"4963016966",
"4768262201",
"4425152085",
"4843136700",
"4989021827",
"6090228850",
"4382579031",
"4508561098",
"6104026052",
"4901272047",
"4731358183",
"4842139870",
"4640109768",
"4104675008",
"6090364398",
"4549133759",
"4842367768",
"6267446794",
"6071113725",
"4803006989",
"4560553211",
"4902333201",
"4324239045",
"4527102435",
"4908769494",
"6123623583",
"6090405345",
"6085917066",
"4940550044",
"4907844077",
"4461979652",
"4383448240",
"4731041821",
"4908074739",
"4887309805",
"4845369761",
"6108375078",
"6086979162",
"4901701053",
"4904983254",
"4902388227",
"4908108803",
"6090149314",
"6067798352",
"4887437455",
"6324701905",
"4465625448",
"6085752903",
"4901912356",
"6090017620",
"6090679674",
"6225646779",
"4908007470",
"6090172499",
"6222690688",
"4961104256",
"6220172930",
"6090362530",
"6090077003",
"4945144451",
"6089476994",
"4809067262",
"4080931557",
"4907774737",
"4083955821",
"4187565329",
"6227441325",
"6060637655",
"4751124625",
"4646801736",
"4845604825",
"4845612089",
"4484072041",
"6090165336",
"6081147371",
"4901013564",
"4901908561",
"4827367647",
"6088661062",
"4845287323",
"4901028065",
"4889100202",
"4907436165",
"6090121843",
"6260266693",
"6083798752",
"4803395160",
"4726386727",
"4880744425",
"4626477437",
"6105822049",
"4465935293",
"6085766742",
"6090281050",
"6090183725",
"4240993423",
"4886988628",
"4908010684",
"4846332705",
"4901709267",
"4290934277",
"4745084455",
"4583731353",
"4440348513",
"4845402963",
"4103672447",
"4901961756",
"4869094894",
"4725734063",
"4844678868",
"4907238444",
"6088692715",
"4944353561",
"6090145262",
"6090627275",
"4844672762",
"4187698795",
"4902351528",
"4888278962",
"4725970425",
"4901943561",
"4548951504",
"4545007112",
"4843941603",
"6089982881",
"4762506303",
"4345177634",
"6246491480",
"4902786362",
"4465464800",
"6090086347",
"4465306253",
"4901896555",
"4543832205",
"4887692676",
"4521842291",
"4885524954",
"4184055257",
"4885602815",
"4405088713",
"4901008099",
"4444335335",
"4800061474",
"6090110329",
"6088772271",
"4084493112",
"6047074111",
"6080721236",
"4901326406",
"4887592868",
"4906116787",
"4507064503",
"4902423448",
"4362446281",
"4548539034",
"4107443248",
"6105807171",
"6089830763",
"4002887510",
"4981024886",
"4901984276",
"6260097697",
"4907931255",
"6164501733",
"4802657218",
"6088149949",
"4247965506",
"4731038162",
"4385639868",
"4844085468",
"6090122661",
"4907787367",
"6090114952",
"6106284091",
"6263663588",
"4442956073",
"4325127011",
"6091213164",
"6168445447",
"4944337329",
"6089714534",
"6090272140",
"4908020477",
"6088107251",
"6304853688",
"6090274992",
"4901976788",
"4901907468",
"6090217301",
"6089974935",
"4105025376",
"6090167584",
"4700152869",
"4887597959",
"4547383154",
"6090084646",
"4907965575",
"6089949612",
"4448856755",
"4660937488",
"4007416907",
"6124256495",
"6084627870",
"4982310815",
"6104601723",
"6090378682",
"4901993011",
"4903901017",
"4782340583",
"4000411756",
"4781057608",
"4903204634",
"4901914758",
"4547574723",
"4921259623",
"4226810783",
"6260261934",
"6128063497",
"4901980009",
"4901978357",
"4549358904",
"4289430759",
"6090229210",
"6090011207",
"4901294806",
"6090189456",
"6180065551",
"6086780323",
"6089474665",
"4343156621",
"4907229771",
"4465192975",
"4883143368",
"4146937450",
"4480229124",
"6261151504",
"6310201131",
"6302465397",
"6287148543",
"6089941255",
"4484575183",
"6308229482",
"4047606324",
"6082595971",
"4907857306",
"4466244979",
"4740377349",
"4342491036",
"4825441955",
"6090231029",
"4565062593",
"4843014613",
"4560598991",
"4204933610",
"4924463396",
"4882846152",
"4885345197",
"4902767503",
"4905605008",
"6086044252",
"4248922665",
"6089537640",
"4465714114",
"4887752970",
"4907956436",
"4228004482",
"4268271147",
"4828489312",
"4889051988",
"6089970387",
"4222107573",
"6149389626",
"4904484347",
"4887486839",
"4642746773",
"4907746784",
"6286599797",
"4848929660",
"4123179843",
"6088198699",
"4010933372",
"6090011568",
"4707802230",
"6090424927",
"4547331332",
"4820079670",
"4409885073",
"4726389289",
"4283931403",
"4547333777",
"4901462113",
"4900468916"};

            foreach (string item in nhsnos)
            {
              SuccessCount +=  (item.ValidateNHSNo()) ? 1 : 0;
            }



            int ExpectedSuccess = nhsnos.Count();

            Assert.AreEqual(SuccessCount, ExpectedSuccess);

        }


        #endregion


        #region isNHSFormatted


        [ExpectedException(typeof(ArgumentNullException))]
        [TestMethod]
        public void IsNHSFormattedNull()
        {

            
            String testNo = null;
            bool isNHS =  testNo.IsNHSFormatted();

        }


        [TestMethod]
        public void Is12CharsLong()
        {
            string testno = "123 456 7891";
            bool expectedValue = true;

            Assert.AreEqual(testno.IsNHSFormatted(), expectedValue);


        }

        [TestMethod]
        public void hasTwoSpaces()
        {
            string testNo = "123 456 7891";
            bool expectedValue = true;
            Assert.AreEqual(testNo.IsNHSFormatted(), expectedValue);
        }


        [TestMethod]
        public void spacesAreAtPosition4and8()
        {

            string testNo = "123 456 7891";
            bool expectedValue = true;
            Assert.AreEqual(testNo.IsNHSFormatted(), expectedValue);

        }


        #endregion

    }
}
